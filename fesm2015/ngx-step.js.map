{"version":3,"file":"ngx-step.js","sources":["../../../projects/ngx-step/src/lib/stageformatter.pipe.ts","../../../projects/ngx-step/src/lib/ngx-step.component.ts","../../../projects/ngx-step/src/lib/ngx-step.html","../../../projects/ngx-step/src/lib/ngx-step.module.ts","../../../projects/ngx-step/src/public-api.ts","../../../projects/ngx-step/src/ngx-step.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'formatText'\r\n})\r\nexport class StageFormatterPipe implements PipeTransform {\r\n\r\n  transform(data: string, seprator: string): string {\r\n    if (data) {\r\n      var res = data.split(seprator);\r\n      var displayData = \"\";\r\n      res.forEach(element=>{\r\n        displayData = displayData + ' ' + element;\r\n      });\r\n      return displayData;\r\n    }else{\r\n      return '';\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, OnChanges,ViewChild, SimpleChanges } from '@angular/core';\n\n\n@Component({\n  selector: 'ngx-step',\n  templateUrl: 'ngx-step.html',\n  styleUrls: ['ngx-step.css']\n})\nexport class NgxStepComponent implements OnChanges {\n  @Input() updateProgressLogs: any = [] ;\n  @Input() stages :any = [1,2,3,4,5];\n  @Input() jobOverallStatus :any = 'NOT_STARTED'; // Possible Values- NOT_STARTED , ACTIVE, COMPLETED, FAILED\n  @Input() options:any = {\n    type: 'BASIC',//CUSTOM - you need to generate stages and its\n    excludeFirstEntry: false,\n    showLogs: false,\n    finalStageName: 'FINISH',\n    isMultiWordStageName : false,\n    textSeparator: '_'\n  };\n\n  states: any = [];\n  \n  constructor() { }\n  ngOnChanges(changes: SimpleChanges): void {\n    this.ngOnInit();\n  }\n\n  ngOnInit(): void {\n    this.generateStages();\n  }\n\n  generateStages(){\n    if(this.options.type === 'CUSTOM'){\n      let result = this.groupBy(this.updateProgressLogs.updateInfo, (obj:any) => obj.stage);\n      if(this.states.length > 0){\n        this.states = []; //reset previous states data \n      }\n      this.stages.forEach((item:any, index:any) => {\n        var element = item.name ? item.name : item ;\n        if(element in result){\n          let stageStatus =  result[element][result[element].length-1].status;\n          this.states.push({'name':element,'status':stageStatus});\n        }else{\n          // Then take the value from the updateInfo object\n          if(index <= 0){\n            this.states.push({'name':element,'status':'IN_PROGRESS'});\n          }else{\n            // Check if previous stage of not found element is completed then make the not found stage at position 'index' status as IN_PROGRESS else 'NOT_STARTED'.\n             var previousStateStatus = this.states[index-1].status;\n             var newStatusForNotFoundStage = previousStateStatus === 'COMPLETED' ? 'IN_PROGRESS' : 'NOT_STARTED'; \n             this.states.push({'name':element,'status':newStatusForNotFoundStage});\n            }\n        }\n      });\n    }\n  }\n\n  groupBy(array:any, key:any) {\n    const keyFn = key instanceof Function ? key : (obj:any) => obj[key];\n    return array.reduce((objectsByKeyValue:any, obj:any) => {\n      const value = keyFn(obj);\n      objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);\n      return objectsByKeyValue;\n    }, {});\n  }\n\n}\n","<div class=\"row mt-2\" style=\"overflow: hidden !important;\" *ngIf=\"options.type === 'BASIC'\">\r\n    <div class=\"col-md-12 col-sm-12 job-progress-bar p-0 bg-white\">\r\n        <div class=\"track\" *ngIf=\"stages.length >0\">\r\n            <div class=\"step\" [ngClass]=\"state.status\" *ngFor=\"let state of stages; let i = index\">\r\n                <span class=\"icon\"> <em class=\"fas\" [ngClass]=\"{\r\n                    'fa-check': state.status === 'COMPLETED',\r\n                    'fa-sync fa-spin': state.status === 'IN_PROGRESS',\r\n                    'fa-times': state.status === 'FAILED',\r\n                    'fa-circle': state.status === 'NOT_STARTED'\r\n                }\"></em> </span>\r\n                <span class=\"text\" *ngIf=\"options.isMultiWordStageName\">{{state.name | formatText : options.textSeparator}}</span>\r\n                <span class=\"text\" *ngIf=\"!options.isMultiWordStageName\">{{state.name}}</span>\r\n\r\n            </div>\r\n            <div class=\"step\">\r\n                <span class=\"icon\"\r\n                    [ngClass]=\"{\r\n                        'job-success': (jobOverallStatus === 'COMPLETED' && states[this.states.length - 1].status === 'COMPLETED' ), \r\n                        'text-white': (jobOverallStatus === 'ACTIVE'),\r\n                        'job-failed': (jobOverallStatus === 'FAILED')\r\n                    }\">\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'COMPLETED'\"></em>\r\n                    <em class=\"fa fa-times\"\r\n                        *ngIf=\"jobOverallStatus === 'FAILED'\"></em>\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status != 'COMPLETED'  \"></em>\r\n                    <em class=\"fa fa-cog fa-spin text-muted\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status === 'COMPLETED' \"></em>\r\n                </span>\r\n                <span class=\"text\"> \r\n                    {{options.finalStageName}}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"row mt-2\" style=\"overflow: hidden !important;\" *ngIf=\"options.type === 'CUSTOM'\">\r\n    <div class=\"col-md-12 col-sm-12 job-progress-bar p-0 bg-white\">\r\n        <div class=\"track\" *ngIf=\"states.length >0\">\r\n            <div class=\"step\" [ngClass]=\"state.status\" *ngFor=\"let state of states; let i = index\">\r\n                <span class=\"icon\"> <em class=\"fas\" [ngClass]=\"{\r\n                    'fa-check': state.status === 'COMPLETED',\r\n                    'fa-sync fa-spin': state.status === 'IN_PROGRESS',\r\n                    'fa-times': state.status === 'FAILED',\r\n                    'fa-circle': state.status === 'NOT_STARTED'\r\n                }\"></em> </span>\r\n                <span class=\"text\" *ngIf=\"options.isMultiWordStageName\">{{state.name | formatText : options.textSeparator}}</span>\r\n                <span class=\"text\" *ngIf=\"!options.isMultiWordStageName\">{{state.name}}</span>\r\n            </div>\r\n            <div class=\"step\">\r\n                <span class=\"icon\"\r\n                    [ngClass]=\"{\r\n                        'job-success': (jobOverallStatus === 'COMPLETED' && states[this.states.length - 1].status === 'COMPLETED' ), \r\n                        'text-white': (jobOverallStatus === 'ACTIVE'),\r\n                        'job-failed': (jobOverallStatus === 'FAILED')\r\n                    }\">\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'COMPLETED'\"></em>\r\n                    <em class=\"fa fa-times\"\r\n                        *ngIf=\"jobOverallStatus === 'FAILED'\"></em>\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status != 'COMPLETED'  \"></em>\r\n                    <em class=\"fa fa-cog fa-spin text-muted\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status === 'COMPLETED' \"></em>\r\n                </span>\r\n                <span class=\"text\"> \r\n                    {{options.finalStageName}} \r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!-- If user wants Logs to display -->\r\n<div class=\"row mt-2\"  *ngIf=\"options.showLogs\">\r\n    <div class=\"col-md-12\">\r\n        <div class=\"shadow-none\">\r\n            <div class=\"card-header\">\r\n                <h3 class=\"card-title\">Events and Logs</h3>\r\n            </div>\r\n            <div class=\"card-body p-0 elevation-1 table-responsive\">\r\n            </div>\r\n            <div class=\"card-footer\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxStepComponent } from './ngx-step.component';\nimport { StageFormatterPipe } from './stageformatter.pipe';\n\n\n@NgModule({\n  declarations: [\n    NgxStepComponent,\n    StageFormatterPipe\n  ],\n  imports: [\n    CommonModule    \n  ],\n  exports: [\n    NgxStepComponent\n  ]\n})\nexport class NgxStepModule { }\n","/*\n * Public API Surface of ngx-step\n */\n\nexport * from './lib/ngx-step.component';\nexport * from './lib/ngx-step.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.StageFormatterPipe"],"mappings":"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"}