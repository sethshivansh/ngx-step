{"version":3,"file":"ngx-step.umd.js","sources":["../../../projects/ngx-step/src/lib/stageformatter.pipe.ts","../../../projects/ngx-step/src/lib/ngx-step.component.ts","../../../projects/ngx-step/src/lib/ngx-step.html","../../../projects/ngx-step/src/lib/ngx-step.module.ts","../../../projects/ngx-step/src/public-api.ts","../../../projects/ngx-step/src/ngx-step.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'formatText'\r\n})\r\nexport class StageFormatterPipe implements PipeTransform {\r\n\r\n  transform(data: string, seprator: string): string {\r\n    if (data) {\r\n      var res = data.split(seprator);\r\n      var displayData = \"\";\r\n      res.forEach(element=>{\r\n        displayData = displayData + ' ' + element;\r\n      });\r\n      return displayData;\r\n    }else{\r\n      return '';\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, OnChanges,ViewChild, SimpleChanges } from '@angular/core';\n\n\n@Component({\n  selector: 'ngx-step',\n  templateUrl: 'ngx-step.html',\n  styleUrls: ['ngx-step.css']\n})\nexport class NgxStepComponent implements OnChanges {\n  @Input() updateProgressLogs: any = [] ;\n  @Input() stages :any = [1,2,3,4,5];\n  @Input() jobOverallStatus :any = 'NOT_STARTED'; // Possible Values- NOT_STARTED , ACTIVE, COMPLETED, FAILED\n  @Input() options:any = {\n    type: 'BASIC',//CUSTOM - you need to generate stages and its\n    excludeFirstEntry: false,\n    showLogs: false,\n    finalStageName: 'FINISH',\n    isMultiWordStageName : false,\n    textSeparator: '_'\n  };\n\n  states: any = [];\n  \n  constructor() { }\n  ngOnChanges(changes: SimpleChanges): void {\n    this.ngOnInit();\n  }\n\n  ngOnInit(): void {\n    this.generateStages();\n  }\n\n  generateStages(){\n    if(this.options.type === 'CUSTOM'){\n      let result = this.groupBy(this.updateProgressLogs.updateInfo, (obj:any) => obj.stage);\n      if(this.states.length > 0){\n        this.states = []; //reset previous states data \n      }\n      this.stages.forEach((item:any, index:any) => {\n        var element = item.name ? item.name : item ;\n        if(element in result){\n          let stageStatus =  result[element][result[element].length-1].status;\n          this.states.push({'name':element,'status':stageStatus});\n        }else{\n          // Then take the value from the updateInfo object\n          if(index <= 0){\n            this.states.push({'name':element,'status':'IN_PROGRESS'});\n          }else{\n            // Check if previous stage of not found element is completed then make the not found stage at position 'index' status as IN_PROGRESS else 'NOT_STARTED'.\n             var previousStateStatus = this.states[index-1].status;\n             var newStatusForNotFoundStage = previousStateStatus === 'COMPLETED' ? 'IN_PROGRESS' : 'NOT_STARTED'; \n             this.states.push({'name':element,'status':newStatusForNotFoundStage});\n            }\n        }\n      });\n    }\n  }\n\n  groupBy(array:any, key:any) {\n    const keyFn = key instanceof Function ? key : (obj:any) => obj[key];\n    return array.reduce((objectsByKeyValue:any, obj:any) => {\n      const value = keyFn(obj);\n      objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);\n      return objectsByKeyValue;\n    }, {});\n  }\n\n}\n","<div class=\"row mt-2\" style=\"overflow: hidden !important;\" *ngIf=\"options.type === 'BASIC'\">\r\n    <div class=\"col-md-12 col-sm-12 job-progress-bar p-0 bg-white\">\r\n        <div class=\"track\" *ngIf=\"stages.length >0\">\r\n            <div class=\"step\" [ngClass]=\"state.status\" *ngFor=\"let state of stages; let i = index\">\r\n                <span class=\"icon\"> <em class=\"fas\" [ngClass]=\"{\r\n                    'fa-check': state.status === 'COMPLETED',\r\n                    'fa-sync fa-spin': state.status === 'IN_PROGRESS',\r\n                    'fa-times': state.status === 'FAILED',\r\n                    'fa-circle': state.status === 'NOT_STARTED'\r\n                }\"></em> </span>\r\n                <span class=\"text\" *ngIf=\"options.isMultiWordStageName\">{{state.name | formatText : options.textSeparator}}</span>\r\n                <span class=\"text\" *ngIf=\"!options.isMultiWordStageName\">{{state.name}}</span>\r\n\r\n            </div>\r\n            <div class=\"step\">\r\n                <span class=\"icon\"\r\n                    [ngClass]=\"{\r\n                        'job-success': (jobOverallStatus === 'COMPLETED' && states[this.states.length - 1].status === 'COMPLETED' ), \r\n                        'text-white': (jobOverallStatus === 'ACTIVE'),\r\n                        'job-failed': (jobOverallStatus === 'FAILED')\r\n                    }\">\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'COMPLETED'\"></em>\r\n                    <em class=\"fa fa-times\"\r\n                        *ngIf=\"jobOverallStatus === 'FAILED'\"></em>\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status != 'COMPLETED'  \"></em>\r\n                    <em class=\"fa fa-cog fa-spin text-muted\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status === 'COMPLETED' \"></em>\r\n                </span>\r\n                <span class=\"text\"> \r\n                    {{options.finalStageName}}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"row mt-2\" style=\"overflow: hidden !important;\" *ngIf=\"options.type === 'CUSTOM'\">\r\n    <div class=\"col-md-12 col-sm-12 job-progress-bar p-0 bg-white\">\r\n        <div class=\"track\" *ngIf=\"states.length >0\">\r\n            <div class=\"step\" [ngClass]=\"state.status\" *ngFor=\"let state of states; let i = index\">\r\n                <span class=\"icon\"> <em class=\"fas\" [ngClass]=\"{\r\n                    'fa-check': state.status === 'COMPLETED',\r\n                    'fa-sync fa-spin': state.status === 'IN_PROGRESS',\r\n                    'fa-times': state.status === 'FAILED',\r\n                    'fa-circle': state.status === 'NOT_STARTED'\r\n                }\"></em> </span>\r\n                <span class=\"text\" *ngIf=\"options.isMultiWordStageName\">{{state.name | formatText : options.textSeparator}}</span>\r\n                <span class=\"text\" *ngIf=\"!options.isMultiWordStageName\">{{state.name}}</span>\r\n            </div>\r\n            <div class=\"step\">\r\n                <span class=\"icon\"\r\n                    [ngClass]=\"{\r\n                        'job-success': (jobOverallStatus === 'COMPLETED' && states[this.states.length - 1].status === 'COMPLETED' ), \r\n                        'text-white': (jobOverallStatus === 'ACTIVE'),\r\n                        'job-failed': (jobOverallStatus === 'FAILED')\r\n                    }\">\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'COMPLETED'\"></em>\r\n                    <em class=\"fa fa-times\"\r\n                        *ngIf=\"jobOverallStatus === 'FAILED'\"></em>\r\n                    <em class=\"fa fa-clipboard-check\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status != 'COMPLETED'  \"></em>\r\n                    <em class=\"fa fa-cog fa-spin text-muted\"\r\n                        *ngIf=\"jobOverallStatus === 'ACTIVE' && states[this.states.length - 1].status === 'COMPLETED' \"></em>\r\n                </span>\r\n                <span class=\"text\"> \r\n                    {{options.finalStageName}} \r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!-- If user wants Logs to display -->\r\n<div class=\"row mt-2\"  *ngIf=\"options.showLogs\">\r\n    <div class=\"col-md-12\">\r\n        <div class=\"shadow-none\">\r\n            <div class=\"card-header\">\r\n                <h3 class=\"card-title\">Events and Logs</h3>\r\n            </div>\r\n            <div class=\"card-body p-0 elevation-1 table-responsive\">\r\n            </div>\r\n            <div class=\"card-footer\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxStepComponent } from './ngx-step.component';\nimport { StageFormatterPipe } from './stageformatter.pipe';\n\n\n@NgModule({\n  declarations: [\n    NgxStepComponent,\n    StageFormatterPipe\n  ],\n  imports: [\n    CommonModule    \n  ],\n  exports: [\n    NgxStepComponent\n  ]\n})\nexport class NgxStepModule { }\n","/*\n * Public API Surface of ngx-step\n */\n\nexport * from './lib/ngx-step.component';\nexport * from './lib/ngx-step.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i0","Pipe","i1","i2.StageFormatterPipe","Component","Input","CommonModule","NgModule"],"mappings":"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"}